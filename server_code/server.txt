//2017.11.18 리눅스서버로 변환 성공 - 김진석 서버소스 참고

#define FD_SETSIZE 100 //접속가능한 클라이언트수 삭제시 기본64 최대 1024설정 

#include <stdio.h>
#include <string.h>
//★win용으로 리눅스컴파일시제거★#include <winsock2.h>
//★win용으로 리눅스컴파일시제거★#pragma comment(lib, "ws2_32.lib") 

#include <sys/types.h> //●리눅스추가
#include <sys/socket.h> //●리눅스추가
#include <sys/unistd.h> //●리눅스추가
#include <stdbool.h> //●리눅스추가
#include <netinet/in.h>	//●리눅스추가
#include <netinet/tcp.h>//●리눅스추가
typedef int SOCKET;//●리눅스추가
typedef bool BOOLEAN;//●리눅스추가
typedef struct sockaddr_in SOCKADDR_IN;//●리눅스추가
typedef struct sockaddr SOCKADDR;//●리눅스추가
#define ZeroMemory(str, len) (memset(str, 0, len))//●리눅스추가
#define SOCKET_ERROR -1//●리눅스추가
#define INVALID_SOCKET -1//●리눅스추가

#define PORT 3500
#define MAX_BUF_SIZE 256 
#define MAX_CLIENT 100 

int client_s_num[MAX_CLIENT];
int num_client=0; 
int maxfdp1;

int getmax(int k)
{
        int max = k;
        int i=0;
        for(i = 0; i < num_client ; i++)            
               if(client_s_num[i] > max)
                       max = client_s_num[i];
        return max;
}
int main()
{
 
 //★win용으로 리눅스컴파일시제거★WSADATA wsdata;
 
 //★win용으로 리눅스컴파일시제거★if(WSAStartup(MAKEWORD(2,2), &wsdata) != 0) 
 //★win용으로 리눅스컴파일시제거★{
 //★win용으로 리눅스컴파일시제거★	  printf("윈도우 소켓 초기화 실패\n");
 //★win용으로 리눅스컴파일시제거★	  return 1; 
 //★win용으로 리눅스컴파일시제거★}

 
 SOCKET serverSocket;
 serverSocket=socket(AF_INET, SOCK_STREAM, 0);
 
 if(serverSocket < 0)
 {
	 printf("소켓 생성 실패!\n\n");
	  //★win용으로 리눅스컴파일시제거★WSACleanup(); 
	close(serverSocket);//●리눅스추가
	 return 1;
 }
 
 
 SOCKADDR_IN serverAddress;  
 ZeroMemory(&serverAddress, sizeof(serverAddress));
 
 serverAddress.sin_family = AF_INET; 
 serverAddress.sin_port = htons(PORT); 
 serverAddress.sin_addr.s_addr = htonl(INADDR_ANY);

 
 if(bind(serverSocket, (SOCKADDR*)&serverAddress, sizeof(serverAddress)) == SOCKET_ERROR) 
 {
	 printf("serverSocket에 IP와 PORT를 부여하는데 실패!\n\n");
	 return 1;
 }
 
 printf("클라이언트의 접속 대기중\n");
 if(listen(serverSocket, SOMAXCONN)==SOCKET_ERROR)
 {
	 printf("클라이언트의 접속 대기실패\n");
	 return 1;
 }

 maxfdp1 = serverSocket + 1; 
fd_set read_fds;


int fd_num;
int read_data,send_data;
SOCKET client_socket;
int i=0,j=0;

char s_msg_str[MAX_BUF_SIZE+20]; 
char str_client_socket[10];

while(1)
 {  
	  FD_ZERO(&read_fds);
	  FD_SET(serverSocket, &read_fds);

       for(i=0; i<num_client; i++)     
               FD_SET(client_s_num[i], &read_fds);
       maxfdp1 = getmax(serverSocket) + 1;       

	   fd_num=select(maxfdp1,&read_fds,NULL,NULL,NULL);
		if(fd_num<0)
		{
           printf("select 오류발생\n\n");
           continue;
		}

	  if(FD_ISSET(serverSocket,&read_fds))
	  {
 
			if((client_socket = accept(serverSocket, NULL, NULL)) == INVALID_SOCKET)
			{
				printf("클라이언트와 데이터를 주고받는 소켓을 생성할 수 없음!\n\n");
				continue;
			}
			printf("%d 클라이언트가 접속성공\n",client_socket);
			
			ZeroMemory(s_msg_str, MAX_BUF_SIZE+20);

			 //★win용으로 리눅스컴파일시제거★ultoa(client_socket,str_client_socket,10);
			sprintf(str_client_socket, "%d", client_socket);//●리눅스추가

			strcat(s_msg_str, str_client_socket); 
			strcat(s_msg_str, "--"); 
			strcat(s_msg_str, "번호 클라이언트 접속축한다."); 
			send(client_socket,s_msg_str,strlen(s_msg_str), 0 );
			client_s_num[num_client]=client_socket;
			num_client++; 
			continue;
	  }
 
	  for(i=0;i<num_client;i++)
	  {
			if(FD_ISSET(client_s_num[i],&read_fds))
			{
				ZeroMemory(s_msg_str, MAX_BUF_SIZE+20);
				read_data=recv(client_s_num[i],s_msg_str,MAX_BUF_SIZE+20,0);

				if(read_data<=0)
				{

					 //★win용으로 리눅스컴파일시제거★closesocket(client_s_num[i]); 
					close(client_s_num[i]);//●리눅스추가
					if(i != num_client -1)
						   client_s_num[i] = client_s_num[num_client -1]; 
					num_client --;                             
					printf("채팅참가자1명탈퇴. 현재참가자수= %d\n",num_client);
					printf("%d 클라이언트가 접속을 종료\n",client_s_num[i]);
					FD_CLR(client_s_num[i], &read_fds);              


				}
				else
				{
					for(j=0;j<num_client;j++)
					{
						send_data=send(client_s_num[j],s_msg_str,strlen(s_msg_str), 0 );
						printf("%s\n",s_msg_str);
					}
					
				}

			}
	  }

  }

 //★win용으로 리눅스컴파일시제거★closesocket(serverSocket);
 //★win용으로 리눅스컴파일시제거★printf("클라이언트와의 접속을 종료\n\n");
 //★win용으로 리눅스컴파일시제거★WSACleanup();
 //★win용으로 리눅스컴파일시제거★printf("윈도우 소켓 종료\n\n");
 close(client_socket);
 printf("클라이언트와의 접속을 종료\n\n리눅스 소켓 종료\n\n");
 
 return 0;
 
}
 















